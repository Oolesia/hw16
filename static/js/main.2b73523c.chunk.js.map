{"version":3,"sources":["components/female.svg","components/male.svg","components/Contact/index.js","components/Contracts/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Contact","className","this","props","contactCards","map","contact","item","key","firstName","lastName","gender","src","female","alt","male","phone","Component","Contracts","state","contacts","search","handleSearchChange","e","setState","target","value","data","filter","searchValue","toLocaleLowerCase","toLowerCase","includes","onChange","length","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,kOCgC5BC,E,uKAxBP,OACI,6BACI,yBAAKC,UAAU,YAEXC,KAAKC,MAAMC,aAAaC,KAAI,SAACC,EAASC,GAAV,OAC5B,yBAAKN,UAAU,OAAOO,IAAKD,EAAKD,EAAQG,WACxC,4BAAKH,EAAQG,UAAY,IAAMH,EAAQI,UACvC,2BAAIJ,EAAQK,QACV,WACE,OAAQL,EAAQK,QAChB,IAAK,SAAY,OAAO,yBAAKC,IAAKC,IAAQC,IAAI,WAC9C,IAAK,OAAU,OAAO,yBAAKF,IAAKG,IAAMD,IAAI,UAH5C,GAMF,2BAAIR,EAAQU,iB,GAjBVC,aCwDPC,E,4MAvDXC,MAAQ,CACJC,SAAY,CAAC,CACXX,UAAW,uCACXC,SAAU,qEACVM,MAAO,gBACPL,OAAQ,QACT,CACCF,UAAW,iCACXC,SAAU,+DACVM,MAAO,gBACPL,OAAQ,UACT,CACCF,UAAW,6CACXC,SAAU,mDACVM,MAAO,iBACR,CACCP,UAAW,iCACXC,SAAU,mDACVM,MAAO,gBACPL,OAAQ,UACT,CACCF,UAAW,uCACXC,SAAU,yDACVM,MAAO,gBACPL,OAAQ,QACT,CACCF,UAAW,uCACXC,SAAU,6CACVM,MAAO,gBACPL,OAAQ,SAEZU,OAAS,I,EAIXC,mBAAqB,SAACC,GAClB,EAAKC,SAAS,CAAEH,OAAQE,EAAEE,OAAOC,S,uDAI5B,IAAD,OACEC,EAAOzB,KAAKiB,MAAMC,SAASQ,QAAO,SAACrB,GACrC,IAAMsB,EAAc,EAAKV,MAAME,OAAOS,oBACtC,OAAOvB,EAAKG,SAASqB,cAAcC,SAASH,IAAgBtB,EAAKE,UAAUsB,cAAcC,SAASH,IAClGtB,EAAKS,MAAMgB,SAASH,MAGxB,OACI,6BACI,2BAAO5B,UAAU,aAAagC,SAAU/B,KAAKoB,mBAAoBD,OAAQnB,KAAKiB,MAAME,SACnFM,EAAKO,OAAS,kBAAC,EAAD,CAAS9B,aAAgBuB,IAAU,8C,GAnD1CV,aCUTkB,E,uKARX,OACE,yBAAKlC,UAAU,OACf,kBAAC,EAAD,W,GALYgB,aCQEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2b73523c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/female.5c87994c.svg\";","module.exports = __webpack_public_path__ + \"static/media/male.07582995.svg\";","import React, {Component} from 'react';\r\nimport '../components.css';\r\nimport female from '../female.svg';\r\nimport male from '../male.svg';\r\n\r\nclass Contact extends Component{\r\n    render(){\r\n\r\n        return(\r\n            <div>\r\n                <div className='contacts'>\r\n                    {\r\n                    this.props.contactCards.map((contact, item) => (\r\n                    <div className='card' key={item+contact.firstName}>\r\n                    <h5>{contact.firstName + ' ' + contact.lastName}</h5>\r\n                    <p>{contact.gender}</p>\r\n                    {(() => {\r\n                        switch (contact.gender) {\r\n                        case \"female\":   return <img src={female} alt='female'/>;\r\n                        case \"male\":   return <img src={male} alt='male'/>;\r\n                        }\r\n                    })()}\r\n                    <p>{contact.phone}</p>\r\n                    </div>\r\n                    ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Contact;","import React, { Component } from 'react';\r\nimport Contact from '../Contact'\r\nimport '../components.css';\r\n\r\n\r\nclass Contracts extends Component {\r\n    state = {\r\n        contacts :  [{\r\n          firstName: \"Барней\",\r\n          lastName: \"Стинсовский\",\r\n          phone: \"+380956319521\",\r\n          gender: \"male\"\r\n      }, {\r\n          firstName: \"Робин\",\r\n          lastName: \"Щербатская\",\r\n          phone: \"+380931460123\",\r\n          gender: \"female\"\r\n      }, {\r\n          firstName: \"Аномный\",\r\n          lastName: \"Анонимус\",\r\n          phone: \"+380666666666\"\r\n      }, {\r\n          firstName: \"Лилия\",\r\n          lastName: \"Олдровна\",\r\n          phone: \"+380504691254\",\r\n          gender: \"female\"\r\n      }, {\r\n          firstName: \"Маршэн\",\r\n          lastName: \"Эриксонян\",\r\n          phone: \"+380739432123\",\r\n          gender: \"male\"\r\n      }, {\r\n          firstName: \"Теодор\",\r\n          lastName: \"Мотсбэс\",\r\n          phone: \"+380956319521\",\r\n          gender: \"male\"\r\n      }],\r\n      search : ''\r\n    }\r\n\r\n\r\n    handleSearchChange = (e) =>{\r\n        this.setState({ search :e.target.value });\r\n    }\r\n            \r\n\r\n    render(){\r\n        const data = this.state.contacts.filter((item) => {\r\n            const searchValue = this.state.search.toLocaleLowerCase();\r\n            return item.lastName.toLowerCase().includes(searchValue) || item.firstName.toLowerCase().includes(searchValue) || \r\n            item.phone.includes(searchValue)\r\n        });\r\n\r\n        return(\r\n            <div>\r\n                <input className='filter-inp' onChange={this.handleSearchChange} search={this.state.search}/>\r\n                {data.length ? <Contact contactCards = {data}/> : <p>No results</p> }\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Contracts;","import React, {Component} from 'react';\nimport './App.css';\nimport Contacts from './components/Contracts'\n\nclass App extends Component {\n\n  render(){\n    return (\n      <div className=\"App\">\n      <Contacts/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}